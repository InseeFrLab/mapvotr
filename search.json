[{"path":"/articles/mapvotr.html","id":"les-données-en-entrée","dir":"Articles","previous_headings":"","what":"Les données en entrée","title":"Approximer des contours de bureaux de vote","text":"Le package mapvotr s’appuie sur 2 types de sources de données ouvertes : Le fichier déposé sur insee.fr contenant les adresses des électeurs ; Le fichier des contours communaux, issu par exemple de la BD TOPO de l’IGN. Pour simplifier sa prise en main, le package incorpore des extraits de ces deux fichiers.","code":"library(mapvotr) addresses_sample <- mapvotr::addresses_sample contours_com_sample <- mapvotr::contours_com_sample  head(as.data.frame(addresses_sample)) id_brut_bv_reu code_commune_ref longitude latitude    geo_type geo_score nb_adresses 1        29039_1            29039 -3.913795 47.87289 housenumber      0.96           2 2        29039_1            29039 -3.917988 47.86938 housenumber      0.96           4 3        29039_1            29039 -3.917548 47.87026 housenumber      0.96           1 4        29039_1            29039 -3.917988 47.86938 housenumber      0.96           2 5        29039_1            29039 -3.921150 47.86997 housenumber      0.97           2 6        29039_1            29039 -3.918276 47.87105      street      0.96           2 head(contours_com_sample) Simple feature collection with 3 features and 1 field Geometry type: MULTIPOLYGON Dimension:     XY Bounding box:  xmin: -4.37906 ymin: 47.84902 xmax: -3.848632 ymax: 48.50665 Geodetic CRS:  WGS 84  [38;5;246m# A tibble: 3 × 2 [39m   code_insee                                                                      geometry    [3m [38;5;246m<chr> [39m [23m                                                                  [3m [38;5;246m<MULTIPOLYGON [°]> [39m [23m  [38;5;250m1 [39m 29116      (((-4.216645 48.49144, -4.216657 48.49154, -4.216928 48.492, -4.217322 48.49…  [38;5;250m2 [39m 29046      (((-4.306421 48.08932, -4.306392 48.08935, -4.306327 48.08936, -4.306276 48.…  [38;5;250m3 [39m 29039      (((-3.932018 47.87721, -3.932002 47.87722, -3.931925 47.8772, -3.931896 47.8…"},{"path":"/articles/mapvotr.html","id":"préparer-les-adresses","dir":"Articles","previous_headings":"","what":"1. Préparer les adresses","title":"Approximer des contours de bureaux de vote","text":"À partir des deux sources précédentes, la fonction prepare_address va créer : Une nouvelle table d’adresses, en ne retenant que celles ayant une qualité de géolocalisation suffisante, et uniquement dans les communes ayant au moins deux bureaux de vote ; Une liste des communes ayant au moins 2 bureaux de votes (et donc susceptibles d’être partitionnées) ; Une liste des COG (codes officiels géographiques) de ces communes.","code":"prep_adr <- mapvotr::prepare_address(   address = addresses_sample,   contours_com = contours_com_sample,   var_cog1 = \"code_commune_ref\",   var_cog2 = \"code_insee\",   var_bv1 = \"id_brut_bv_reu\",   path_log = NULL) [1] \"=========================================================================\" [1] \"prepare_address\" [1] \"=========================================================================\" [1] \"Row number in initial data base\" [1] 12335 [1] \"Launch rm_arrond\" [1] \"Row number after filtering geo_type\" [1] 11928 [1] \"Launch fget_multiBV\" [1] \"Row number after filtering cities with at leat 2 BdV\" [1] 11875 [1] \"Convert to sf using BAN coordinates\" [1] \"Initial number of rows in city contours\" [1] 3 [1] \"Filtering only cities in the scope\" head(as.data.frame(prep_adr$address)) id_brut_bv_reu code_commune_ref    geo_type geo_score nb_adresses 1        29039_1            29039 housenumber      0.96           2 2        29039_1            29039 housenumber      0.96           4 3        29039_1            29039 housenumber      0.96           1 4        29039_1            29039 housenumber      0.96           2 5        29039_1            29039 housenumber      0.97           2 6        29039_1            29039 housenumber      0.96           1                     geometry 1 POINT (-3.913795 47.87289) 2 POINT (-3.917988 47.86938) 3 POINT (-3.917548 47.87026) 4 POINT (-3.917988 47.86938) 5  POINT (-3.92115 47.86997) 6 POINT (-3.919545 47.87163) head(prep_adr$contours_com) Simple feature collection with 2 features and 1 field Geometry type: MULTIPOLYGON Dimension:     XY Bounding box:  xmin: -4.37906 ymin: 47.84902 xmax: -3.848632 ymax: 48.11038 Geodetic CRS:  WGS 84  [38;5;246m# A tibble: 2 × 2 [39m   code_insee                                                                      geometry    [3m [38;5;246m<chr> [39m [23m                                                                  [3m [38;5;246m<MULTIPOLYGON [°]> [39m [23m  [38;5;250m1 [39m 29046      (((-4.306421 48.08932, -4.306392 48.08935, -4.306327 48.08936, -4.306276 48.…  [38;5;250m2 [39m 29039      (((-3.932018 47.87721, -3.932002 47.87722, -3.931925 47.8772, -3.931896 47.8… print(prep_adr$lcog) 29039   29046  \"29039\" \"29046\""},{"path":"/articles/mapvotr.html","id":"construire-les-contours-dune-commune","dir":"Articles","previous_headings":"","what":"2. Construire les contours d’une commune","title":"Approximer des contours de bureaux de vote","text":"partir de la liste prep_adr précedemment obtenue, la fonction create_contours permet de partitionner une commune donnée en « aires » ou « contours » approximatifs des bureaux de vote. Par exemple, essayons avec la commune de Douarnenez en Bretagne (code 29046, elle fait partie de l’échantillon des données du package). Avant cela, le découpage des communes en contours de bureaux de vote nécessite des hypothèses de construction : MIN_POINT_COM : Une commune ne pourra être découpée que si elle possède un minimum de points géolocalisés en son sein (d’après la base des adresses du REU) ; MIN_ADDRESS_BV : Un contours de bureau de vote sera créé s’il existe un nombre minimal d’adresses associées à ce bureau de vote (toujours dans la base du REU) ; MIN_ADDRESS_SHOOT : Lors de la phase de « simplification / correction » de la géographie des contours, les polygones concernés seront ceux comportant un petit nombre d’adresses en leur sein.","code":"#### Hypothèses de modélisation MIN_POINT_COM <- 50 MIN_ADDRESS_BV <- 15 MIN_ADDRESS_SHOOT <- 5  # Création des contours de Douarnenez cog <- \"29046\"  lcontours <- mapvotr::create_contours(   prep_adr,   cog,   min_points_com = MIN_POINT_COM,   min_address_bv = MIN_ADDRESS_BV,   min_address_shoot = MIN_ADDRESS_SHOOT,   var_cog1 = \"code_commune_ref\",   var_cog2 = \"code_insee\",   var_bv1 = \"id_brut_bv_reu\",   var_geo_score = \"geo_score\",   var_nbaddress = \"nb_adresses\",   path_log = NULL) [1] \"Launch : epsg_from_cog\" [1] \"First checks\" [1] \"Launch f_inContour\" [1] \"0 points removed\" [1] \"Check if the city can be in the scope\" [1] \"Launch valid_for_contours\" [1] \"No problem\" [1] \"Launch voronoi_com\" [1] \"14 points with addresses related to different vote offices\" [1] \"Launch : decouplage_ptsBv\" [1] \"Join voronoi and passage_ptsBv\" [1] \"Launch : shoot_isolated\" [1] \"Launch st_cast_bis\" [1] \"Launch st_cast_bis\" [1] \"Launch : count_voro\" head(as.data.frame(lcontours$contours)) id_brut_bv_reu                       geometry 1        29046_1 POLYGON ((155116.8 6802379,... 2       29046_10 MULTIPOLYGON (((153577.9 68... 3       29046_11 MULTIPOLYGON (((152841.4 68... 4       29046_12 POLYGON ((153635.7 6799223,... 5       29046_13 MULTIPOLYGON (((154914.3 68... 6        29046_2 POLYGON ((155271.1 6802048,... head(as.data.frame(lcontours$contours_simplified)) id_brut_bv_reu                       geometry 1        29046_1 POLYGON ((155116.8 6802379,... 2       29046_10 POLYGON ((153959.1 6802674,... 3       29046_11 MULTIPOLYGON (((154018.7 68... 4       29046_12 POLYGON ((153588.6 6799211,... 5       29046_13 POLYGON ((155360.7 6800818,... 6        29046_2 POLYGON ((155271.1 6802048,..."},{"path":"/articles/mapvotr.html","id":"visualisation-des-contours-produits","dir":"Articles","previous_headings":"","what":"3. Visualisation des contours produits","title":"Approximer des contours de bureaux de vote","text":"La fonction map_contours permet de visualiser rapidement les contours produits à partir des adresses géolocalisées du REU. Note : La couche des points-adresses utilisée pour la création des contours est à afficher selon le besoin en cochant l’affichage dans les options (en haut à droite de la carte).","code":"carte <- mapvotr::map_contours(   cog,   sfelecteurs = prep_adr$address,   contours_bv = lcontours$contours,   var_code_bv = \"id_brut_bv_reu\",   var_score = \"geo_score\",   var_cog = \"code_commune_ref\" )  carte_simplified <- mapvotr::map_contours(   cog,   sfelecteurs = prep_adr$address,   contours_bv = lcontours$contours_simplified,   var_code_bv = \"id_brut_bv_reu\",   var_score = \"geo_score\",   var_cog = \"code_commune_ref\" )    carte carte_simplified"},{"path":"/articles/methodologie.html","id":"nettoyage-et-préparation-des-inputs","dir":"Articles","previous_headings":"","what":"1. Nettoyage et préparation des inputs","title":"Méthodologie adoptée","text":"Remplace les arrondissement communaux de Paris, Lyon et Marseille par le code commune de la ville entière (grâce à la fonction interne rm_arrond). … dans des communes avec au moins 2 bureaux de vote (BV) d’après la base des adresses du REU (grâce à la fonction interne fget_multiBV). … avec une bonne qualité de géolocalisation d’après la Base Adresse Nationale (BAN) (housenumber,interpolation, locality). Transforme les adresses en table sf avec le système de coordonnées WGS84. Récupère les contours et la liste des communes susceptibles d’être découpées en contours de BV (à partir de la table des contours de communes en entrée de la fonction). Ainsi, en théorie, une grande commune dont les adresses sont géolocalisées de manière trop imprécise pourrait être exclue du champ. La fonction renvoie des logs, c’est-à-dire enregistre l’historique du bon déroulé des différentes fonctions. Pour enregistrer ces logs localement, il faut entrer un chemin dans le paramètre path_log.","code":""},{"path":"/articles/methodologie.html","id":"découpage-dune-commune-en-contours-de-bureaux-de-vote","dir":"Articles","previous_headings":"","what":"2. Découpage d’une commune en contours de bureaux de vote","title":"Méthodologie adoptée","text":"La fonction create_contours vise à partionner une ville cible en contours approximés de bureaux de vote. La ville cible est désignée par son code officiel géographique ou « code Insee ». create_contours utilise la liste des adresses et les contours communaux produits par prepare_address.","code":""},{"path":"/articles/methodologie.html","id":"étape-1-vérifications-et-préparations","dir":"Articles","previous_headings":"2. Découpage d’une commune en contours de bureaux de vote","what":"Étape 1 : Vérifications et préparations","title":"Méthodologie adoptée","text":"Suppression des points de la base REU en dehors du contours géographique de la commune (des effets de bords peuvent exister entre les différentes sources). Vérification que la commune cible possède au moins min_points_com points (grâce à la fonction interne valid_for_contours). Autrement, la fonction renvoie NULL. Si ce n’est pas le cas, les adresses associées à ce BV sont retirées du champ et la commune sera découpée sans prise en compte de l’existence de ce BV.","code":""},{"path":"/articles/methodologie.html","id":"étape-2-partitionnement-de-la-commune-en-contours-de-bureaux-de-vote","dir":"Articles","previous_headings":"2. Découpage d’une commune en contours de bureaux de vote","what":"Étape 2 : Partitionnement de la commune en contours de bureaux de vote","title":"Méthodologie adoptée","text":"Partition de la commune en polygones de Voronoï à partir du nuage de points géolocalisés (grâce à la fonction interne voronoi_com) Des hypothèses sont nécessaires quand trouve plusieurs adresses sur un même point géographique, et que ces adresses sont reliés à plusieurs BV différents : considère par ordre de priorité le nombre d’adresses associées à chaque BV, puis la qualité de géolocalisation de ces adresses. regroupe géographiquement (union) les polygones de Voronoï par bureau de vote. Une première version de contours « bruts » est ainsi construite.","code":""},{"path":"/articles/methodologie.html","id":"étape-3-simplificationcorrection-a-posteriori-des-contours","dir":"Articles","previous_headings":"2. Découpage d’une commune en contours de bureaux de vote","what":"Étape 3 : Simplification/correction a posteriori des contours","title":"Méthodologie adoptée","text":"L’idée est de supprimer les éventuels « confettis » de contours, essentiellement dus à des imprécisions de géolocalisation. La fonction interne shoot_isolated est ici mobilisée. Les contours des bureaux de votes n’étant pas nécessairement contigus, transforme le zonage en polygones contigus (grâce à la fonction interne st_cast_bis) Ces polygones étant, par construction, des juxtapositions de polygones de Voronoï, recherche les polygones composés de moins de min_address_shoot polygones de Voronoï (et donc de moins de min_address_shoot points géographiques). Cette opération est réalisée à l’aide de la fonction interne count_voro. Si ce polygone n’est pas isolé (s’il touche d’autres polygones associés à l’autres BV) Si au moins un de ses voisins est suffisamment gros (composé de plus de min_address_shoot points géographiques). Si ces conditions sont réunies, choisit comme nouveau code BV celui du plus gros voisin. Enfin, fusionne les polygones en fonction de leurs éventuels nouveaux codes BV. reforme ainsi une partion de la commune en contours de BV expurgés des « confettis » traîtés. La fonction create_contours renvoie la partition brute et la partition simplifiée de la commune. Comment précedemment, create_contours renvoie des logs, qui peuvent être enregistrées localement grâce au paramètre path_log.","code":""},{"path":"/articles/methodologie.html","id":"visualisation-dynamique-des-contours-créés","dir":"Articles","previous_headings":"","what":"3. Visualisation dynamique des contours créés","title":"Méthodologie adoptée","text":"La package mapvotr met à disposition de l’utilisateur une fonction de visualisation des contours produits aux étapes précédentes, permettant notamment d’en contrôler la qualité. La fonction map_contours permet ainsi de visualiser conjointement dans la commune cible sur des fonds de cartes dynamiques : les contours produits (bruts ou simplifiés) ; Les adresses géolocalisées du REU (à afficher selon le besoin en cochant l’affichage dans les options) Pour plus de détails, voir la vignette de prise en main du package.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julien PRAMIL. Author, maintainer. Institut national de la statistique et des études économiques. Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"PRAMIL J (2023). mapvotr: Create vote office contours. R package version 0.1.0.","code":"@Manual{,   title = {mapvotr: Create vote office contours},   author = {Julien PRAMIL},   year = {2023},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"mapvotr-","dir":"","previous_headings":"","what":"Create vote office contours","title":"Create vote office contours","text":"Production de contours approximés de bureaux de votes (BV) à partir de la base des adresses géolocalisées du Répertoire électoral unique (REU) diffusée par l’Insee.","code":""},{"path":"/index.html","id":"premiers-pas","dir":"","previous_headings":"","what":"Premiers pas","title":"Create vote office contours","text":"Installation Pour un exemple d’utilisation et pour davantage d’informations sur la méthode, se référer à la documentation en ligne de mapvotr","code":"devtools::install_github(\"InseeFrLab/mapvotr\")"},{"path":"/index.html","id":"en-savoir-plus","dir":"","previous_headings":"","what":"En savoir plus","title":"Create vote office contours","text":"Article de blog documentant la génèse et un cas d’utilisation du package Outil similaire développé en python par Etalab","code":""},{"path":"/reference/addresses_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for addresses — addresses_sample","title":"Sample data for addresses — addresses_sample","text":"subset addresses data","code":""},{"path":"/reference/addresses_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for addresses — addresses_sample","text":"","code":"addresses_sample"},{"path":[]},{"path":"/reference/addresses_sample.html","id":"addresses-sample","dir":"Reference","previous_headings":"","what":"addresses_sample","title":"Sample data for addresses — addresses_sample","text":"data frame 12335 rows 7 columns: id_brut_bv_reu BV id code_commune_ref City code longitude longitude (WGS84) latitude latitude (WGS84) geo_type Type geolocalization (BAN variable) geo_score Geolocalization accuracy score (BAN variable) nb_adresses Number addresses line (= geolocalization)","code":""},{"path":"/reference/addresses_sample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for addresses — addresses_sample","text":"Insee","code":""},{"path":"/reference/contours_com_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for city contours — contours_com_sample","title":"Sample data for city contours — contours_com_sample","text":"subset city contours data (IGN - BDTopo)","code":""},{"path":"/reference/contours_com_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for city contours — contours_com_sample","text":"","code":"contours_com_sample"},{"path":[]},{"path":"/reference/contours_com_sample.html","id":"contours-com-sample","dir":"Reference","previous_headings":"","what":"contours_com_sample","title":"Sample data for city contours — contours_com_sample","text":"data frame 3 rows 2 columns: code_insee City code geometry sf column (WGS84)","code":""},{"path":"/reference/contours_com_sample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for city contours — contours_com_sample","text":"IGN","code":""},{"path":"/reference/count_voro.html","id":null,"dir":"Reference","previous_headings":"","what":"Count how many voronoï by cast contours — count_voro","title":"Count how many voronoï by cast contours — count_voro","text":"Count number voronoï polygons used create voting areas (contours)","code":""},{"path":"/reference/count_voro.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count how many voronoï by cast contours — count_voro","text":"","code":"count_voro(contours, voronoi, marg = 1e-04)"},{"path":"/reference/count_voro.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count how many voronoï by cast contours — count_voro","text":"contours multipolygons (union voronoï polygons) voronoi polygons (multipolygon sometimes) marg technical parameter","code":""},{"path":"/reference/count_voro.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count how many voronoï by cast contours — count_voro","text":"number voronoi polygons per contour (using intersections)","code":""},{"path":"/reference/count_voro.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count how many voronoï by cast contours — count_voro","text":"","code":"if (FALSE) { # contours <- lcontours$`29199` %>% st_cast_bis # voronoi <- lvoronoi$`29199` %>% st_cast_bis # marg <-  0.0001 # count_voro(contours,voronoi) }"},{"path":"/reference/create_contours.html","id":null,"dir":"Reference","previous_headings":"","what":"create vote offices contours — create_contours","title":"create vote offices contours — create_contours","text":"Crée les contours des bureaux de votes pour une ville donnée Create outputs needed targeted city","code":""},{"path":"/reference/create_contours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create vote offices contours — create_contours","text":"","code":"create_contours(   prep_adr,   cog,   min_points_com,   min_address_bv,   min_address_shoot,   var_cog1 = \"code_commune_ref\",   var_cog2 = \"code_insee\",   var_bv1 = \"id_brut_bv_reu\",   var_geo_score = \"geo_score\",   var_nbaddress = \"nb_adresses\",   path_log = NULL )"},{"path":"/reference/create_contours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create vote offices contours — create_contours","text":"prep_adr Result prepare_address function : address : table geolocalized addresses (cities scope) com : city contours (sf, scope) lcog_ok : scope cities available cog official targetted city code min_points_com minimal number address city (global parameter) min_address_bv minimal number address vote office (global parameter) min_address_shoot minimal number address polygons result contours (global parameter) var_cog1 name city code variable address table var_cog2 name city code variable city-contours table var_bv1 name bv code variable address table var_geo_score name geo_score variable address table var_nbaddress name number addresses point address table path_log path write logs (default NULL)","code":""},{"path":"/reference/create_contours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"create vote offices contours — create_contours","text":"city scope : list raw contours simplified contours NULL otherwise (looping purpose)","code":""},{"path":"/reference/create_contours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"create vote offices contours — create_contours","text":"Addresses geographic contours filtered works cities verifying least \"min_points_com\" points Create BV contours BV contains least \"min_address_bv\" addresses Creates voronoi polygons (intersected city borders) Links Voronoi polygon one single BV (hypothesis \"decouplage_ptsBv\" function documentation) Creates BV contours grouping voronoi polygons BVs Gives simplified version contours trying remove little cast polygons less \"min_address_shoot\" addresses (see \"shoot_isolated\" documentation)","code":""},{"path":"/reference/create_contours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"create vote offices contours — create_contours","text":"","code":"address <- mapvotr::addresses_sample contours_com <- mapvotr::contours_com_sample prep_adr <- prepare_address(   address = address,   contours_com = contours_com,   var_cog1 = \"code_commune_ref\",   var_bv1 = \"id_brut_bv_reu\",   path_log = NULL ) #> [1] \"=========================================================================\" #> [1] \"prepare_address\" #> [1] \"=========================================================================\" #> [1] \"Row number in initial data base\" #> [1] 12335 #> [1] \"Launch rm_arrond\" #> [1] \"Row number after filtering geo_type\" #> [1] 11928 #> [1] \"Launch fget_multiBV\" #> [1] \"Row number after filtering cities with at leat 2 BdV\" #> [1] 11875 #> [1] \"Convert to sf using BAN coordinates\" #> [1] \"Initial number of rows in city contours\" #> [1] 3 #> [1] \"Filtering only cities in the scope\" cog <- \"29039\" path_log <- NULL min_points_com <- 50 min_address_bv <- 15 min_address_shoot <- 5 var_cog1 <- \"code_commune_ref\" var_cog2 <- \"code_insee\" var_bv1 <- \"id_brut_bv_reu\" var_geo_score <- \"geo_score\" var_nbaddress <- \"nb_adresses\" create_contours(prep_adr, cog, min_points_com, min_address_bv, min_address_shoot) #> [1] \"Launch : epsg_from_cog\" #> [1] \"First checks\" #> [1] \"Launch f_inContour\" #> [1] \"0 points removed\" #> [1] \"Check if the city can be in the scope\" #> [1] \"Launch valid_for_contours\" #> [1] \"No problem\" #> [1] \"Launch voronoi_com\" #> [1] \"19 points with addresses related to different vote offices\" #> [1] \"Launch : decouplage_ptsBv\" #> [1] \"Join voronoi and passage_ptsBv\" #> [1] \"Launch : shoot_isolated\" #> [1] \"Launch st_cast_bis\" #> [1] \"Launch st_cast_bis\" #> [1] \"Launch : count_voro\" #> $contours #> Simple feature collection with 17 features and 1 field #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 181289.4 ymin: 6772363 xmax: 188708.9 ymax: 6783302 #> Projected CRS: RGF93 v1 / Lambert-93 #> # A tibble: 17 × 2 #>    id_brut_bv_reu                                                       geometry #>    <chr>                                                          <GEOMETRY [m]> #>  1 29039_1        MULTIPOLYGON (((183192.3 6774781, 183187.3 6774781, 183189 67… #>  2 29039_10       MULTIPOLYGON (((184588.2 6776035, 184453.8 6775997, 184258.9 … #>  3 29039_11       MULTIPOLYGON (((184025.1 6774337, 184016.7 6774336, 184012.8 … #>  4 29039_12       MULTIPOLYGON (((184547.4 6774384, 184545.7 6774388, 184537.2 … #>  5 29039_13       MULTIPOLYGON (((183824.6 6772826, 183823.2 6772832, 183825 67… #>  6 29039_14       POLYGON ((185139.5 6774771, 185132.3 6774776, 185115 6774789,… #>  7 29039_15       MULTIPOLYGON (((185339.1 6774077, 185322.1 6774095, 185313.2 … #>  8 29039_16       MULTIPOLYGON (((183100.3 6776071, 183099.7 6776071, 183073.4 … #>  9 29039_17       MULTIPOLYGON (((184355.2 6772442, 184354.8 6772450, 184356.5 … #> 10 29039_2        POLYGON ((183028.1 6775009, 183021.5 6775017, 182995.1 677500… #> 11 29039_3        MULTIPOLYGON (((182654.4 6775014, 182648.7 6775016, 182605.5 … #> 12 29039_4        MULTIPOLYGON (((182211.7 6776366, 182200.1 6776366, 182193.1 … #> 13 29039_5        MULTIPOLYGON (((182397.3 6776408, 182374.8 6776430, 182383.5 … #> 14 29039_6        MULTIPOLYGON (((183414.9 6775840, 183410.2 6775831, 183394 67… #> 15 29039_7        POLYGON ((183444 6775360, 183445.6 6775363, 183446.8 6775370,… #> 16 29039_8        POLYGON ((183219.7 6777248, 183212 6777307, 183203.2 6777328,… #> 17 29039_9        POLYGON ((183689.3 6778818, 183666.5 6778861, 183634.7 677891… #>  #> $contours_simplified #> Simple feature collection with 17 features and 1 field #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 181289.4 ymin: 6772363 xmax: 188708.9 ymax: 6783302 #> Projected CRS: RGF93 v1 / Lambert-93 #> # A tibble: 17 × 2 #>    id_brut_bv_reu                                                       geometry #>    <chr>                                                          <GEOMETRY [m]> #>  1 29039_1        MULTIPOLYGON (((183189 6774789, 183200 6774814, 183190.2 6774… #>  2 29039_10       POLYGON ((184588.2 6776035, 184453.8 6775997, 184258.9 677602… #>  3 29039_11       MULTIPOLYGON (((183880.6 6774730, 183882.7 6774730, 183883.3 … #>  4 29039_12       MULTIPOLYGON (((184545.7 6774388, 184537.2 6774395, 184537.3 … #>  5 29039_13       MULTIPOLYGON (((183803.9 6772849, 183799.5 6772843, 183795.1 … #>  6 29039_14       POLYGON ((186329.7 6774364, 186321.6 6774383, 186245.8 677441… #>  7 29039_15       MULTIPOLYGON (((185313.2 6774112, 185273.8 6774166, 185276.4 … #>  8 29039_16       POLYGON ((183100.3 6776071, 183099.7 6776071, 183073.4 677608… #>  9 29039_17       POLYGON ((184055.6 6773232, 184064.9 6773232, 184069.6 677323… #> 10 29039_2        POLYGON ((183028.1 6775009, 183021.5 6775017, 182995.1 677500… #> 11 29039_3        MULTIPOLYGON (((182899.5 6774674, 182895.5 6774670, 182889.2 … #> 12 29039_4        POLYGON ((182211.7 6776366, 182200.1 6776366, 182193.1 677636… #> 13 29039_5        MULTIPOLYGON (((183268.1 6776772, 183266.8 6776789, 183268.8 … #> 14 29039_6        POLYGON ((183484.1 6776001, 183449.8 6775967, 183399.5 677600… #> 15 29039_7        POLYGON ((184135.1 6775298, 184046.1 6775400, 184042.4 677540… #> 16 29039_8        POLYGON ((184134.5 6776898, 183751.1 6776883, 183736.3 677689… #> 17 29039_9        POLYGON ((183689.3 6778818, 183666.5 6778861, 183634.7 677891… #>"},{"path":"/reference/decouplage_ptsBv.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconciliation points - vote offices — decouplage_ptsBv","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"Gives single BV point","code":""},{"path":"/reference/decouplage_ptsBv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"","code":"decouplage_ptsBv(   sfelecteurs,   com,   var_bv = \"id_brut_bv_reu\",   var_geo_score = \"geo_score\",   var_nbaddress = \"nb_adresses\",   epsg )"},{"path":"/reference/decouplage_ptsBv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"sfelecteurs table addresses (sf object) com city contour (sf object) var_bv name bv code variable address table var_geo_score name geo_score variable address table var_nbaddress name number addresses point address table epsg epsg code","code":""},{"path":"/reference/decouplage_ptsBv.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"passing table BVs points","code":""},{"path":"/reference/decouplage_ptsBv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"several addresses geolocalized point, addresses related different BVs : possible : Take BV maximum number addresses geolocalized point many number addresses several BVs : take BV related best geolocalized points Else, random choice (rare)","code":""},{"path":"/reference/decouplage_ptsBv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconciliation points - vote offices — decouplage_ptsBv","text":"","code":"sfelecteurs <- mapvotr::sf_input_voronoi com <- mapvotr::contours_com_sample %>%   dplyr::filter(code_insee == \"29039\") %>%   sf::st_transform(2154) var_bv <- \"id_brut_bv_reu\" var_geo_score <- \"geo_score\" var_nbaddress <- \"nb_adresses\" epsg <- 2154 mapvotr:::decouplage_ptsBv(sfelecteurs, com, var_bv, var_geo_score, var_nbaddress, epsg) #> [1] \"Launch : decouplage_ptsBv\" #> Log is not open. #> Simple feature collection with 267 features and 1 field #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: 183062.1 ymin: 6774688 xmax: 184500.1 ymax: 6777707 #> Projected CRS: RGF93 v1 / Lambert-93 #> # A tibble: 267 × 2 #>    id_brut_bv_reu           geometry #>  * <chr>                 <POINT [m]> #>  1 29039_1        (183062.1 6774983) #>  2 29039_1          (183075 6774976) #>  3 29039_1          (183094 6774983) #>  4 29039_1        (183095.3 6774994) #>  5 29039_1        (183100.1 6774995) #>  6 29039_1        (183104.8 6774997) #>  7 29039_1        (183109.8 6774988) #>  8 29039_1          (183116 6775017) #>  9 29039_1        (183138.1 6775008) #> 10 29039_1        (183139.2 6775000) #> # ℹ 257 more rows"},{"path":"/reference/epsg_from_cog.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess EPSG code — epsg_from_cog","title":"Guess EPSG code — epsg_from_cog","text":"Guess epsg code using city code (choosing metropolitan France overseas territories)","code":""},{"path":"/reference/epsg_from_cog.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess EPSG code — epsg_from_cog","text":"","code":"epsg_from_cog(cog)"},{"path":"/reference/epsg_from_cog.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess EPSG code — epsg_from_cog","text":"cog Municipality official code","code":""},{"path":"/reference/epsg_from_cog.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Guess EPSG code — epsg_from_cog","text":"epsg code","code":""},{"path":"/reference/epsg_from_cog.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess EPSG code — epsg_from_cog","text":"","code":"cog = 29019  epsg_from_cog(cog) #> [1] \"Launch : epsg_from_cog\" #> Log is not open. #> [1] 2154"},{"path":"/reference/f_inContour.html","id":null,"dir":"Reference","previous_headings":"","what":"Exclude points out of their city — f_inContour","title":"Exclude points out of their city — f_inContour","text":"Retire les points en dehors du contour de leur commune Exclude points border","code":""},{"path":"/reference/f_inContour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Exclude points out of their city — f_inContour","text":"","code":"f_inContour(sfpoints, sfcontour, verbose = FALSE)"},{"path":"/reference/f_inContour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Exclude points out of their city — f_inContour","text":"sfpoints points (sf) sfcontour polygon (sf) verbose TRUE : prints information","code":""},{"path":"/reference/f_inContour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Exclude points out of their city — f_inContour","text":"sfpoints without points sfContour","code":""},{"path":"/reference/f_inContour.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Exclude points out of their city — f_inContour","text":"","code":"sfpoints <- addresses_sample[addresses_sample$code_commune_ref == \"29039\", ] sfpoints <- sfpoints %>%   sf::st_as_sf(     coords = c(\"longitude\", \"latitude\"),     crs = 4326,     na.fail = FALSE   ) sfcontour <- contours_com_sample[contours_com_sample$code_insee == \"29039\", ] verbose <- TRUE mapvotr:::f_inContour(sfpoints, sfcontour, verbose) #> [1] \"Launch f_inContour\" #> Log is not open. #> [1] \"2 points removed\" #> Log is not open. #> Simple feature collection with 6847 features and 5 fields #> Geometry type: POINT #> Dimension:     XY #> Bounding box:  xmin: -3.94575 ymin: 47.851 xmax: -3.848959 ymax: 47.94269 #> Geodetic CRS:  WGS 84 #> # A tibble: 6,847 × 6 #>    id_brut_bv_reu code_commune_ref geo_type    geo_score nb_adresses #>    <chr>          <chr>            <chr>           <dbl>       <int> #>  1 29039_1        29039            housenumber      0.96           2 #>  2 29039_1        29039            housenumber      0.96           4 #>  3 29039_1        29039            housenumber      0.96           1 #>  4 29039_1        29039            housenumber      0.96           2 #>  5 29039_1        29039            housenumber      0.97           2 #>  6 29039_1        29039            street           0.96           2 #>  7 29039_1        29039            housenumber      0.96           1 #>  8 29039_1        29039            housenumber      0.56           1 #>  9 29039_1        29039            housenumber      0.96           1 #> 10 29039_1        29039            housenumber      0.97           1 #> # ℹ 6,837 more rows #> # ℹ 1 more variable: geometry <POINT [°]>"},{"path":"/reference/fget_multiBV.html","id":null,"dir":"Reference","previous_headings":"","what":"Get cities with 2 vote offices or more — fget_multiBV","title":"Get cities with 2 vote offices or more — fget_multiBV","text":"Retourne le COG des communes avec au moins deux BV à partir de la base des adresses Get official codes cities least 2 vote offices","code":""},{"path":"/reference/fget_multiBV.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get cities with 2 vote offices or more — fget_multiBV","text":"","code":"fget_multiBV(tab_addresses, var_cog, var_bv)"},{"path":"/reference/fget_multiBV.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get cities with 2 vote offices or more — fget_multiBV","text":"tab_addresses addresses var_cog column name cog var_bv column name BD id","code":""},{"path":"/reference/fget_multiBV.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get cities with 2 vote offices or more — fget_multiBV","text":"vector city codes (cities least 2 vote offices)","code":""},{"path":"/reference/fget_multiBV.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get cities with 2 vote offices or more — fget_multiBV","text":"","code":"var_cog = \"code_commune_ref\" var_bv = \"id_brut_bv_reu\" mapvotr:::fget_multiBV(mapvotr::addresses_sample,\"code_commune_ref\",\"id_brut_bv_reu\") #> [1] \"Launch fget_multiBV\" #> Log is not open. #> [1] \"29039\" \"29046\""},{"path":"/reference/map_contours.html","id":null,"dir":"Reference","previous_headings":"","what":"Map your contours — map_contours","title":"Map your contours — map_contours","text":"Crée des cartes dynamiques des contours Create dynamic map contours","code":""},{"path":"/reference/map_contours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map your contours — map_contours","text":"","code":"map_contours(   cog,   sfelecteurs,   contours_bv,   var_code_bv = \"id_brut_bv_reu\",   var_score = \"geo_score\",   var_cog = \"code_commune_ref\" )"},{"path":"/reference/map_contours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map your contours — map_contours","text":"cog Municipality official code sfelecteurs addresses targeted city contours_bv contours targeted city var_code_bv name column : id BV var_score name column : quality geocoding var_cog name column : official city code (COG)","code":""},{"path":"/reference/map_contours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Map your contours — map_contours","text":"dynamic map (leaflet style)","code":""},{"path":"/reference/map_contours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map your contours — map_contours","text":"","code":"if (FALSE) { cog <- city_code sfelecteurs=lres$addresses contours_bv=lcontours$contours_simplified var_cog = \"code_commune_ref\" var_score=\"geo_score\" var_code_bv=\"id_brut_bv_reu\" palettecouleurs=\"Paired\" map_contours(cog,sfelecteurs,contours_bv) }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/prepare_address.html","id":null,"dir":"Reference","previous_headings":"","what":"Pre-process addresses — prepare_address","title":"Pre-process addresses — prepare_address","text":"Prétraitement des données à partir des adresses du REU et des contours de communes Prepares data REU addresses city contours","code":""},{"path":"/reference/prepare_address.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pre-process addresses — prepare_address","text":"","code":"prepare_address(   address,   contours_com,   var_cog1 = \"code_commune_ref\",   var_cog2 = \"code_insee\",   var_bv1 = \"id_brut_bv_reu\",   path_log = NULL )"},{"path":"/reference/prepare_address.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pre-process addresses — prepare_address","text":"address addresses REU data (Insee) contours_com city contours (ex : BDTopo IGN) var_cog1 name city code variable address table var_cog2 name city code variable city-contours table var_bv1 name bv code variable address table path_log path write logs (optional)","code":""},{"path":"/reference/prepare_address.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pre-process addresses — prepare_address","text":"List : table address table cities (geographic contours) List city-codes (least 2 bv)","code":""},{"path":"/reference/prepare_address.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pre-process addresses — prepare_address","text":"prepares : table address scope : minimal geolocalization quality BAN quality \"housenumber\", \"interpolation\" \"locality\" list cities least 2 BVs (among filtered addresses) List city geometric contours Operations : Removes arrondissement codes Paris, Lyon Marseille Filters addresses (\"housenumber\", \"interpolation\" \"locality\" quality) Filters cities least 2 vote offices Transform address geometric points (WGS84 projection) Filters geometric city contours (cities least 2 vote offices) Logs missing city contours","code":""},{"path":"/reference/prepare_address.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pre-process addresses — prepare_address","text":"","code":"addresses_sample <- mapvotr::addresses_sample contours_com_sample <- mapvotr::contours_com_sample prepare_address <- prepare_address(   address = addresses_sample,   contours_com = contours_com_sample,   var_cog1 = \"code_commune_ref\",   var_bv1 = \"id_brut_bv_reu\",   path_log = NULL ) #> [1] \"=========================================================================\" #> [1] \"prepare_address\" #> [1] \"=========================================================================\" #> [1] \"Row number in initial data base\" #> [1] 12335 #> [1] \"Launch rm_arrond\" #> [1] \"Row number after filtering geo_type\" #> [1] 11928 #> [1] \"Launch fget_multiBV\" #> [1] \"Row number after filtering cities with at leat 2 BdV\" #> [1] 11875 #> [1] \"Convert to sf using BAN coordinates\" #> [1] \"Initial number of rows in city contours\" #> [1] 3 #> [1] \"Filtering only cities in the scope\""},{"path":"/reference/rm_arrond.html","id":null,"dir":"Reference","previous_headings":"","what":"Remove arrondissements — rm_arrond","title":"Remove arrondissements — rm_arrond","text":"Remplace les cog d'arrondissements communaux par les cog communaux pour Paris, Lyon et Marseille Replace \"arrondissements\" codes city codes Paris, Lyon Marseille","code":""},{"path":"/reference/rm_arrond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Remove arrondissements — rm_arrond","text":"","code":"rm_arrond(tab, var_cog)"},{"path":"/reference/rm_arrond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Remove arrondissements — rm_arrond","text":"tab table cog column var_cog name cog column","code":""},{"path":"/reference/rm_arrond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Remove arrondissements — rm_arrond","text":"tab modified cog column (Paris, Lyon Marseilles codes without arrondissement)","code":""},{"path":"/reference/rm_arrond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Remove arrondissements — rm_arrond","text":"","code":"tab <- data.frame(id=1:5,code_commune_ref=c(\"75118\",\"75000\",\"35000\",\"69382\",NA)) var_cog <- \"code_commune_ref\" mapvotr:::rm_arrond(tab,var_cog) #> [1] \"Launch rm_arrond\" #> Log is not open. #>   id code_commune_ref #> 1  1            75056 #> 2  2            75000 #> 3  3            35000 #> 4  4            69123 #> 5  5             <NA>"},{"path":"/reference/sf_input_voronoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Example data for sf_input_voronoi — sf_input_voronoi","title":"Example data for sf_input_voronoi — sf_input_voronoi","text":"subset real input","code":""},{"path":"/reference/sf_input_voronoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example data for sf_input_voronoi — sf_input_voronoi","text":"","code":"sf_input_voronoi"},{"path":[]},{"path":"/reference/sf_input_voronoi.html","id":"sf-input-voronoi","dir":"Reference","previous_headings":"","what":"sf_input_voronoi","title":"Example data for sf_input_voronoi — sf_input_voronoi","text":"sf table 269 rows 6 columns: id_brut_bv_reu BV id code_commune_ref City code geo_type Type geolocalization (BAN variable) geo_score Geolocalization accuracy score (BAN variable) nb_adresses Number addresses line (= geolocalization) geometry sf column (WGS84)","code":""},{"path":"/reference/sf_input_voronoi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example data for sf_input_voronoi — sf_input_voronoi","text":"IGN","code":""},{"path":"/reference/shoot_isolated.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplify voting contours — shoot_isolated","title":"Simplify voting contours — shoot_isolated","text":"Simplify contours removing isolated polygons","code":""},{"path":"/reference/shoot_isolated.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplify voting contours — shoot_isolated","text":"","code":"shoot_isolated(contours, voronoi, min_address_shoot, var_bv = \"id_brut_bv_reu\")"},{"path":"/reference/shoot_isolated.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplify voting contours — shoot_isolated","text":"contours contours voronoi voronoi polygons min_address_shoot minimal number address polygons result contours (global parameter) var_bv name bv code variable address table","code":""},{"path":"/reference/shoot_isolated.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplify voting contours — shoot_isolated","text":"simplified contours","code":""},{"path":"/reference/shoot_isolated.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplify voting contours — shoot_isolated","text":"Counts number voronoï polygons used create BV contour Targets cast BV Contours (cBVc) built less min_address_shoot voronois/points cBVc isolated (island example) least one neighbor big enough: replace old BV code biggest neighbor 's BV code. Reshape simplified BV contours","code":""},{"path":"/reference/st_cast_bis.html","id":null,"dir":"Reference","previous_headings":"","what":"st_cast debugged — st_cast_bis","title":"st_cast debugged — st_cast_bis","text":"st_cast multipolygons polygons, avoiding bugs input spatial data \"incongruent\". See : https://github.com/r-spatial/sf/issues/763","code":""},{"path":"/reference/st_cast_bis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"st_cast debugged — st_cast_bis","text":"","code":"st_cast_bis(sfdata)"},{"path":"/reference/st_cast_bis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"st_cast debugged — st_cast_bis","text":"sfdata sf object","code":""},{"path":"/reference/st_cast_bis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"st_cast debugged — st_cast_bis","text":"cast polygons","code":""},{"path":"/reference/valid_for_contours.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if the city can be divided into voting contours — valid_for_contours","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"Check city can scope (ok divided several geographical contours)","code":""},{"path":"/reference/valid_for_contours.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"","code":"valid_for_contours(   tab_address,   min_points_com,   min_address_bv,   var_bv1,   var_nbaddress )"},{"path":"/reference/valid_for_contours.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"tab_address addresses single city min_points_com minimal number points city (global parameter) min_address_bv minimal number address vote office (global parameter) var_bv1 name bv code variable address table var_nbaddress name number addresses point address table","code":""},{"path":"/reference/valid_for_contours.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"TRUE city scope, otherwise FALSE list problematic BVs","code":""},{"path":"/reference/valid_for_contours.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"function uses addresses city targeted","code":""},{"path":"/reference/valid_for_contours.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if the city can be divided into voting contours — valid_for_contours","text":"","code":"tab_address <- mapvotr::addresses_sample min_points_com <- 50 min_address_bv <- 15 var_bv1 = \"id_brut_bv_reu\" var_nbaddress = \"nb_adresses\" mapvotr:::valid_for_contours(tab_address, min_points_com, min_address_bv,var_bv1,var_nbaddress) #> [1] \"Launch valid_for_contours\" #> Log is not open. #> [1] \"No problem\" #> Log is not open. #> [1] TRUE  # With some problematic BVs lines_pb <- tab_address[tab_address$id_brut_bv_reu == \"29039_1\",][1:5,] tab_address_pb <- tab_address[tab_address$id_brut_bv_reu != \"29039_1\",] %>% rbind(lines_pb) mapvotr:::valid_for_contours(tab_address_pb, min_points_com, min_address_bv,var_bv1,var_nbaddress) #> [1] \"Launch valid_for_contours\" #> Log is not open. #> [1] \"Not enough addresses by BV (threshold = 15)\" #> Log is not open. #> # A tibble: 1 × 2 #>   id_brut_bv_reu nb_address #>   <chr>               <int> #> 1 29039_1                11 #> Log is not open. #> [1] \"29039_1\""},{"path":"/reference/voronoi_com.html","id":null,"dir":"Reference","previous_headings":"","what":"Make Voronoï polygons — voronoi_com","title":"Make Voronoï polygons — voronoi_com","text":"Partition city voronoi polygons : Use sf::st_voronoi envelope parameter (= city contour) Cast result intersects city contour","code":""},{"path":"/reference/voronoi_com.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make Voronoï polygons — voronoi_com","text":"","code":"voronoi_com(sfelecteurs, com, var_bv)"},{"path":"/reference/voronoi_com.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make Voronoï polygons — voronoi_com","text":"sfelecteurs sf points com city contours (sf multipolygons) var_bv column name BV id column","code":""},{"path":"/reference/voronoi_com.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Make Voronoï polygons — voronoi_com","text":"voronoi multipolygons","code":""},{"path":"/reference/voronoi_com.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Make Voronoï polygons — voronoi_com","text":"Create voronoi polygons inside city contours. 1 point = several addresses = several BVs","code":""},{"path":"/reference/voronoi_com.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Make Voronoï polygons — voronoi_com","text":"","code":"sfelecteurs <- mapvotr::sf_input_voronoi com <- mapvotr::contours_com_sample %>%   dplyr::filter(code_insee == \"29039\") %>%   sf::st_transform(2154) var_bv <- \"id_brut_bv_reu\" mapvotr:::voronoi_com(sfelecteurs, com, var_bv) #> [1] \"Launch voronoi_com\" #> Log is not open. #> [1] \"2 points with addresses related to different vote offices\" #> Log is not open. #> Simple feature collection with 267 features and 1 field #> Geometry type: GEOMETRY #> Dimension:     XY #> Bounding box:  xmin: 181289.4 ymin: 6772363 xmax: 188708.9 ymax: 6783302 #> Projected CRS: RGF93 v1 / Lambert-93 #> First 10 features: #>                          geometry id_voronoi #> 1  POLYGON ((182950.4 6778987,...          1 #> 2  MULTIPOLYGON (((183059.1 67...          2 #> 3  MULTIPOLYGON (((183105.6 67...          3 #> 4  POLYGON ((183081 6774990, 1...          4 #> 5  POLYGON ((183076.5 6774995,...          5 #> 6  POLYGON ((183117 6774908, 1...          6 #> 7  POLYGON ((183145.8 6774925,...          7 #> 8  POLYGON ((183081 6774990, 1...          8 #> 9  POLYGON ((183136.9 6774963,...          9 #> 10 POLYGON ((183139.7 6774966,...         10"},{"path":"/news/index.html","id":"mapvotr-010","dir":"Changelog","previous_headings":"","what":"mapvotr 0.1.0","title":"mapvotr 0.1.0","text":"Creation package","code":""}]
